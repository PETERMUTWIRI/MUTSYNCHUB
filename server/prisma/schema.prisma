// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Multi-tenancy
model Organization {
  id            String            @id @default(uuid())
  name          String
  subdomain     String           @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  users         User[]
  apiKeys       ApiKey[]
  dataSources   DataSource[]
  datasets      Dataset[]
  reports       AnalyticsReport[]
  settings      Json?
  status        OrgStatus        @default(ACTIVE)
  subscription  Subscription?
  planId        String?
  plan          Plan?            @relation(fields: [planId], references: [id])
  analyticsSchedules AnalyticsSchedule[]
  payments      Payment[]
  paymentReconciliations PaymentReconciliation[]
  auditLogs     AuditLog[]        // Back relation for AuditLog.organization
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String
  firstName     String?
  lastName      String?
  role          UserRole     @default(USER)
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastLoginAt   DateTime?
  status        UserStatus   @default(ACTIVE)
  auditLogs     AuditLog[]
  payments      Payment[]
  mfaEnabled    Boolean      @default(false)
  mfaSecret     String?
  mfaPendingSecret String?
  mfaBackupCodes String?

  // Add these fields to the User model for enterprise-grade auth and password reset
  failedLoginAttempts   Int       @default(0)
  refreshTokenHash      String?   // Hashed refresh token for secure refresh
  resetTokenHash        String?   // Hashed password reset token
  resetTokenExpiresAt   DateTime?
}

// API Management
model ApiKey {
  id            String       @id @default(cuid())
  key           String       @unique
  name          String
  status        String       @default("ACTIVE")
  scopes        String[]
  orgId         String
  createdAt     DateTime     @default(now())
  expiresAt     DateTime?
  lastUsedAt    DateTime?
  useCount      Int          @default(0)
  revokedAt     DateTime?
  organization  Organization @relation(fields: [orgId], references: [id])
}

// Data Source Integration
model DataSource {
  id            String       @id @default(uuid())
  name          String
  type          DataSourceType
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String
  config        Json            // Stores connection details securely
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  status        DataSourceStatus @default(ACTIVE)
  lastSyncAt    DateTime?
  dataStreams   DataStream[]
  datasets      Dataset[]       // Added this relation
}

model DataStream {
  id            String       @id @default(uuid())
  name          String
  dataSource    DataSource   @relation(fields: [dataSourceId], references: [id])
  dataSourceId  String
  schema        Json        // Defines the structure of incoming data
  transformations Json?     // Optional data transformations
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  status        StreamStatus @default(ACTIVE)
}

// Audit Logging
model AuditLog {
  id            String      @id @default(uuid())
  userId        String?     // Nullable userId for system/super admin logs
  user          User?       @relation(fields: [userId], references: [id])
  orgId         String?
  organization  Organization? @relation(fields: [orgId], references: [id])
  action        String
  resource      String
  details       Json?
  createdAt     DateTime    @default(now())
  ipAddress     String?
  userAgent     String?
}

// Subscription Management
model Subscription {
  id            String       @id @default(uuid())
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String       @unique
  plan          String
  status        SubStatus    @default(ACTIVE)
  startDate     DateTime     @default(now())
  endDate       DateTime?
  billingInfo   Json?
}

// Analytics Models
model Dataset {
  id            String       @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String
  dataSource    DataSource   @relation(fields: [dataSourceId], references: [id])
  dataSourceId  String
  schema        Json         // Column definitions and types
  analyses      Analysis[]
  data          Json[]       // Actual data rows
}

model Analysis {
  id            String       @id @default(uuid())
  type          String      // AUTOMATED_EDA, FORECASTING, FULL_ANALYSIS
  dataset       Dataset      @relation(fields: [datasetId], references: [id])
  datasetId     String
  parameters    Json?        // Analysis configuration
  results       Json?        // Analysis results
  status        String      // PENDING, RUNNING, COMPLETED, FAILED
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  error         String?      // Error message if failed
}

model IndustrySchema {
  id            String       @id @default(uuid())
  type          String      @unique // retail, wholesale, etc.
  name          String
  description   String?
  schema        Json        // Field definitions and transformations
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model AnalyticsReport {
  id            String       @id @default(uuid())
  name          String
  description   String?
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String
  type          String      // daily, weekly, monthly, custom
  config        Json        // Report configuration
  schedule      String?     // Cron expression for scheduled reports
  createdAt     DateTime     @default(now())
  updatedAt     DateTime    @updatedAt
  lastRun       DateTime?
  results       Json?       // Latest report results
}

model AnalyticsSchedule {
  id            String       @id @default(uuid())
  organization  Organization @relation(fields: [orgId], references: [id])
  orgId         String
  frequency     String       // e.g., 'hourly', 'daily', 'custom'
  interval      Int?         // Interval in minutes for custom schedules
  createdAt     DateTime     @default(now())
  updatedAt     DateTime    @updatedAt
}

// Payment Models
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentProvider {
  MPESA
  STRIPE
}

model Payment {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  orgId             String
  organization      Organization   @relation(fields: [orgId], references: [id])
  amount            Decimal        @db.Decimal(10, 2)
  currency          String         @default("KES")
  provider          PaymentProvider
  status            PaymentStatus  @default(PENDING)
  checkoutRequestId String?        @unique // M-Pesa checkout request ID
  merchantRequestId String?        // M-Pesa merchant request ID  
  mpesaReceiptNumber String?       // M-Pesa transaction receipt
  phoneNumber       String?        // Customer phone number
  errorMessage      String?        // Error message if payment fails
  retryCount        Int           @default(0)
  metadata          Json?         // Additional payment metadata
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  callbacks         MpesaCallback[]

  @@index([userId])
  @@index([orgId])
  @@index([status])
}

model MpesaCallback {
  id                String    @id @default(cuid())
  payment           Payment   @relation(fields: [checkoutRequestId], references: [checkoutRequestId])
  checkoutRequestId String
  merchantRequestId String
  resultCode        String
  resultDesc        String
  amount            Decimal   @db.Decimal(10, 2)
  mpesaReceiptNumber String?
  phoneNumber       String
  transactionDate   DateTime
  metadata          Json?
  createdAt         DateTime  @default(now())

  @@index([checkoutRequestId])
  @@index([transactionDate])
}

model PaymentReconciliation {
  id                    String    @id @default(cuid())
  date                  DateTime  @unique
  totalTransactions     Int
  successfulTransactions Int
  failedTransactions    Int
  totalAmount          Decimal   @db.Decimal(10, 2)
  metadata             Json?
  createdAt            DateTime  @default(now())
  orgId                String    // Link to organization
  organization         Organization @relation(fields: [orgId], references: [id])

  @@index([date])
  @@index([orgId])
}

model Plan {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  price       Float
  currency    String   @default("USD")
  features    Json     // Store features/limits as JSON
  organizations Organization[]
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
  READONLY
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrgStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ApiKeyStatus {
  ACTIVE
  INACTIVE
  REVOKED
}

enum DataSourceType {
  POS_SYSTEM
  ERP
  DATABASE
  API
  FILE_IMPORT
  CUSTOM
}

enum DataSourceStatus {
  ACTIVE
  INACTIVE
  ERROR
  SYNCING
}

enum StreamStatus {
  ACTIVE
  PAUSED
  ERROR
}

enum SubStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

